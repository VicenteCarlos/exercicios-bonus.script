/* 
    Julia e Caio est√£o aprendendo a programar em JavaScript na DNC.
    Juntos eles querem construir um algoritmo capaz de informar,
    no console, qual dos dois √© mais velho. 
    Ajude-os a elaborar esse algoritmo com as seguintes condi√ß√µes:

        a) Se o valor da vari√°vel `idadeJulia` for maior que o valor da vari√°vel `idadeCaio`:
        - Atribua √† vari√°vel `verificaIdadePessoas` a string `'Julia √© mais velha que Caio'`;

        b) Caso a condi√ß√£o anterior seja falsa:
        - Verifique se o valor da vari√°vel `idadeCaio` √© maior que o valor da vari√°vel `idadeJulia`;
        - Atribua √† vari√°vel `verificaIdadePessoas` a string `'Caio√© mais velho que Julia'`.

        c) Se nenhuma das condi√ß√µes anteriores for verdadeira:
        - Atribua √† vari√°vel `verificaIdadePessoas` a string `'Possuem a mesma idade'`;

        - Utilize as seguintes vari√°veis e seus respectivos valores no c√≥digo:
*/ 

let idadeJulia = 25;
let idadeCaio = 21;
let verificaIdadePessoas = '';

const verifyAge = (ageOfJulia, ageOfCaio) => {
    ageOfJulia > ageOfCaio ? verificaIdadePessoas = "Julia √© mais velha que Caio"
     :  ageOfJulia < ageOfCaio ? verificaIdadePessoas = "Caio √© mais velho que Julia"
     : verificaIdadePessoas = "Possuem a mesma idade"
    
     return verificaIdadePessoas
}

console.log(verifyAge(idadeJulia, idadeCaio))

/* ------------- */

/* 
   Chegou o ver√£o e a clientela da sorveteria DNC cresceu. Pedro, dono do estabelecimento, 
   precisa de ajuda no controle do seu estoque. Voc√™ precisa ajudar Pedro a descobrir:

    - A quantidade de sabores de sorvete;
    - A quantidade de cobertura dispon√≠vel.

        Considere as listas a seguir:

        ```jsx
        **Lista de sabores de sorvete:**
        - Chocolate
        - Morango
        - A√ßa√≠
        - Creme
        - Flocos

        **Lista de sabores de cobertura:**
        - Chocolate
        - Morango
        - Doce de leite
        ```

    - Todos os sabores de sorvete devem estar em um array na vari√°vel `sabores`;
    - Todos os sabores de cobertura devem estar em um array na vari√°vel `coberturas`;
    - Mostre no console duas mensagens informando as quantidades de sabores de cada lista, por exemplo:

    - 'Quantidade de sabores de sorvete: 5';
    - 'Quantidade de sabores de cobertura: 3'.tes vari√°veis e seus respectivos valores no c√≥digo:
*/ 

const quantityOfIce = () => {
    let sabores = ["Chocolate", "Morango", "A√ßa√≠", "Creme", "Flocos"];
    let coberturas = ["Chocolate", "Morango", "Doce de leite"];

    return `
            Quantidade de sabores de sorvete: ${sabores.length}\n
            Quantidade de sabores de cobertura: ${coberturas.length}
           `
};

console.log(quantityOfIce());

/* ------------- */

/* 
   Uma cafeteria te contratou para criar um validador de senhas. 
   O dono da cafeteria solicitou que voc√™ criasse um programa que verifique 
   se a senha digitada √© exatamente igual a senha escolhida para acessar o wi-fi.
*/ 

const validateOfPassword = (passwordLogin, realPassword) => passwordLogin === realPassword ? "Voc√™ est√° logado" : "Senha incorreta"

console.log(validateOfPassword(123, 123)) 

/* ------------- */

/* 
   A DNC est√° preparando uma festa muito importante para comemorar seu anivers√°rio de 10 anos. 
   Ela precisa da sua ajuda para desenvolver um algoritmo que confere se o nome das pessoas
   que chegam √† festa est√° ou n√£o na lista de convidados 
   *(afinal, n√£o √© legal ter penetras na festa n√©?)*.

    - Se encontrar o nome na lista retorne:
        "O nome est√° na lista."
    - Caso contr√°rio:
        "O nome n√£o est√° na lista."
*/ 

let realGuests = ["Celso", "Let√≠cia", "Neymar", "Astri"]
let guestsForValidate = ["Celso", "Let√≠cia", "Arlequina", "Astri", "Vicente"]

const listVaidate = (realGuests, guestsForValidate) => guestsForValidate.forEach((item, i) => item === realGuests[i] ? console.log(`${item} est√° na lista.\n`) : console.log(`${item} n√£o est√° na lista.\n`))

console.log(listVaidate(realGuests, guestsForValidate))

/* ------------- */

/* 
   Daniele √© uma nutricionista e acabou de criar um site para atrair mais clientes.

    **Ela precisa da sua ajuda para disponibilizar uma calculadora de IMC (√çndice de Massa
    Corporal) em seu site.**

    A classifica√ß√£o do √çndice de Massa Corporal (IMC), pode ajudar a identificar obesidade
    ou desnutri√ß√£o em crian√ßas, adolescentes, adultos e idosos.

    O IMC √© a rela√ß√£o entre peso e altura e o c√°lculo √© feito de acordo com a f√≥rmula:

    ```jsx
    IMC = peso/ (altura x altura)
    ```

    **üëÄ Aten√ß√£o:** o peso √© dado em Kg (quilogramas), a altura em m (metros) e o IMC em kg/m2 (quilograma por metro quadrado).

    Depois de obter o resultado, √© retornado para a pessoa em que faixa ela se encontra, podendo
    indicar:

        - Abaixo do peso, quando o resultado √© menor que 18,5 kg/m2;
        - Normal, quando o resultado est√° entre 18,5 e 24,9 kg/m2;
        - Sobrepeso, quando o resultado est√° entre 24,9 e 30 kg/m2;
        - Obesidade, quando o resultado √© maior que 30 kg/m2.
*/ 

const calculatorOfIMC = (height, weight) => {
    const result = weight / (height * height)

    if (result < 18.5) {
        return "Abaixo do peso\n"
    } else if (result > 18.5 && result < 24.9) {
        return "Normal\n"
    } else if (result > 24.9 && result < 30) {
        return "Sobrepeso\n"
    } else if (result > 30) {
        return "Obesidade\n"
    } 
}

console.log(calculatorOfIMC(1.76, 40)) 

/* ------------- */

/* 
  Camille √© dona de uma sapataria onde todas as pessoas da √°rea de vendas 
  recebem um sal√°rio fixo acrescido de 4% de comiss√£o sobre as vendas. 
  A dona da sapataria precisa da sua ajuda para desenvolver um programa que recebe o 
  sal√°rio fixo dos vendedores da sapataria e o valor de suas vendas,  
  calculando e retornando a comiss√£o e seu sal√°rio final no seguinte formato:

*"A comiss√£o √©: x e o ganho total √©: y".*
*/ 

const sale = [["Sapato caro", 500], ["Sapato intermedi√°rio", 250], ["Sapato de entrada", 50]]

const calculatorOfMoney = (fixeValue, sale) => {
    sale.forEach(item => console.log(`Produto vendido: ${item[0]}, R$ ${item[1]}\n`));
    sale.forEach(item => console.log(`Comiss√£o do ${item[0]}: R$ ${(item[1]/100) * 4}`));
    const commitionTotal = sale.reduce((a, b) => a + (b[1]/100) * 4, 0);

    return `A comiss√£o total √©: ${commitionTotal} e o ganho total √©: ${fixeValue + commitionTotal}`
}

console.log(calculatorOfMoney(900, sale))



